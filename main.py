"""
Main Entry Point - Crypto Bot v3.0 [FIXED]
===================================

Point d'entr√©e principal avec support :
- Mode GUI (interface graphique PyQt6)
- Mode daemon (arri√®re-plan)
- Mode once (ex√©cution unique)
"""

import argparse
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, str(Path(__file__).parent))

from core.models import BotConfiguration, AlertLevel
from config.config_manager import ConfigManager
from utils.logger import setup_colored_logger
import logging

logger = None


def run_gui_mode(config: BotConfiguration):
    """Lance l'interface graphique PyQt6"""
    try:
        from PyQt6.QtWidgets import QApplication
        from ui.main_window_qt import CryptoBotGUI
        
        logger.info("üöÄ Lancement de l'interface graphique PyQt6...")
        
        app = QApplication(sys.argv)
        window = CryptoBotGUI(config)
        window.show()
        
        sys.exit(app.exec())
    
    except ImportError as e:
        logger.error(f"‚ùå Erreur : d√©pendances manquantes pour le mode GUI")
        logger.error(f"   Installe les d√©pendances : pip install -r requirements.txt")
        logger.error(f"   D√©tail : {e}")
        sys.exit(1)
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lancement GUI : {e}", exc_info=True)
        sys.exit(1)


def run_daemon_mode(config: BotConfiguration):
    """Lance en mode d√©mon (arri√®re-plan)"""
    try:
        from daemon.daemon_service import DaemonService
        
        logger.info("üîÑ Lancement du d√©mon...")
        daemon = DaemonService(config)
        daemon.start()
    
    except ImportError as e:
        logger.error(f"‚ùå Erreur : module d√©mon manquant")
        logger.error(f"   D√©tail : {e}")
        sys.exit(1)
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lancement d√©mon : {e}", exc_info=True)
        sys.exit(1)


def run_once_mode(config: BotConfiguration, symbol: str = None):
    """Ex√©cute une seule v√©rification"""
    from api.binance_api import BinanceAPI
    from api.telegram_api import TelegramAPI
    from core.services.market_service import MarketService
    from core.services.alert_service import AlertService
    
    logger.info(f"\n{'='*60}")
    logger.info(f"üîç V√âRIFICATION UNIQUE")
    logger.info(f"{'='*60}\n")
    
    # Services
    binance_api = BinanceAPI()
    telegram_api = TelegramAPI(config.telegram_bot_token, config.telegram_chat_id)
    market_service = MarketService(binance_api)
    alert_service = AlertService(config)
    
    # Symboles √† v√©rifier
    symbols = [symbol] if symbol else config.crypto_symbols
    
    for sym in symbols:
        logger.info(f"\nüìä {sym}:")
        logger.info("-" * 60)
        
        try:
            # R√©cup√©rer donn√©es
            market_data = market_service.get_market_data(sym)
            if not market_data:
                logger.error(f"‚ùå Impossible de r√©cup√©rer les donn√©es")
                continue
            
            # Pr√©diction
            prediction = market_service.predict_price_movement(market_data)
            
            # Score opportunit√©
            opportunity = market_service.calculate_opportunity_score(market_data, prediction)
            
            # Afficher r√©sum√©
            logger.info(f"üí∞ Prix actuel : {market_data.current_price.price_eur:.2f} ‚Ç¨")
            logger.info(f"üìà Changement 24h : {market_data.current_price.change_24h:+.2f}%")
            logger.info(f"üéØ RSI : {market_data.technical_indicators.rsi:.0f}")
            
            if market_data.fear_greed_index:
                logger.info(f"üò± Fear & Greed : {market_data.fear_greed_index}/100")
            
            logger.info(f"\nüîÆ Pr√©diction : {prediction.prediction_type.value}")
            logger.info(f"   Confiance : {prediction.confidence}%")
            logger.info(f"   Direction : {prediction.direction}")
            
            logger.info(f"\n‚≠ê Score opportunit√© : {opportunity.score}/10")
            logger.info(f"   {opportunity.recommendation}")
            
            if opportunity.reasons:
                logger.info(f"\nüí° Raisons :")
                for reason in opportunity.reasons[:3]:
                    logger.info(f"   ‚Ä¢ {reason}")
            
            # V√©rifier alertes
            alerts = alert_service.check_alerts(market_data, prediction)
            
            if alerts:
                logger.info(f"\nüö® Alertes ({len(alerts)}) :")
                for alert in alerts:
                    logger.info(f"   ‚Ä¢ [{alert.alert_level.value.upper()}] {alert.message}")
                    
                    # Envoyer sur Telegram
                    if alert.alert_level in [AlertLevel.IMPORTANT, AlertLevel.CRITICAL]:
                        telegram_api.send_alert(alert)
            else:
                logger.info(f"\n‚ÑπÔ∏è Aucune alerte")
        
        except Exception as e:
            logger.error(f"‚ùå Erreur : {e}", exc_info=True)
    
    logger.info(f"\n{'='*60}\n")


def setup_wizard():
    """Assistant de configuration initial"""
    from config.setup_wizard import run_setup_wizard
    
    print("\n" + "="*60)
    print("üéÆ ASSISTANT DE CONFIGURATION")
    print("="*60 + "\n")
    
    config = run_setup_wizard()
    
    print("\n‚úÖ Configuration termin√©e !")
    print("\nPour lancer le bot :")
    print("  ‚Ä¢ Mode GUI : python main.py")
    print("  ‚Ä¢ Mode d√©mon : python main.py --daemon")
    print("  ‚Ä¢ Test : python main.py --once\n")
    
    return config


def main():
    """Point d'entr√©e principal"""
    global logger
    
    parser = argparse.ArgumentParser(
        description="Crypto Bot v3.0 - Bot d'alertes crypto intelligent",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation :
  python main.py                    Lance l'interface graphique
  python main.py --daemon          Lance en mode d√©mon
  python main.py --once            V√©rification unique
  python main.py --once --symbol BTC   V√©rification unique pour BTC
  python main.py --setup           Configure le bot
        """
    )
    
    parser.add_argument("--gui", action="store_true", help="Lance l'interface graphique (d√©faut)")
    parser.add_argument("--daemon", action="store_true", help="Lance en mode d√©mon")
    parser.add_argument("--once", action="store_true", help="Ex√©cution unique")
    parser.add_argument("--setup", action="store_true", help="Lance l'assistant de configuration")
    parser.add_argument("--config", type=str, default="config/config.yaml", help="Fichier de configuration")
    parser.add_argument("--symbol", type=str, help="Symbole crypto (pour --once)")
    parser.add_argument("--log-level", type=str, choices=["DEBUG", "INFO", "WARNING", "ERROR"], default="INFO")
    
    args = parser.parse_args()
    
    # Mode setup (pas besoin de logger encore)
    if args.setup:
        config = setup_wizard()
        sys.exit(0)
    
    # Charger configuration
    try:
        config_manager = ConfigManager(args.config)
        
        if not config_manager.config_exists():
            print(f"‚ùå Fichier de configuration non trouv√© : {args.config}")
            print(f"\nüí° Lance l'assistant de configuration :")
            print(f"   python main.py --setup\n")
            sys.exit(1)
        
        config = config_manager.load_config()
        
        # Valider config
        if not config.telegram_bot_token or not config.telegram_chat_id:
            print(f"‚ùå Configuration Telegram invalide !")
            print(f"\nüí° Relance l'assistant de configuration :")
            print(f"   python main.py --setup\n")
            sys.exit(1)
    
    except Exception as e:
        print(f"‚ùå Erreur chargement configuration : {e}")
        sys.exit(1)
    
    # Configurer logging
    logger = setup_colored_logger(
        name="CryptoBot",
        log_file=config.log_file,
        level=args.log_level
    )
    
    # Banni√®re
    logger.info("\n" + "="*60)
    logger.info("üöÄ CRYPTO BOT v3.0")
    logger.info("="*60)
    logger.info(f"Cryptos surveill√©es : {', '.join(config.crypto_symbols)}")
    logger.info(f"Intervalle : {config.check_interval_seconds}s")
    logger.info("="*60 + "\n")
    
    # D√©terminer mode
    if args.once:
        run_once_mode(config, args.symbol)
    
    elif args.daemon:
        run_daemon_mode(config)
    
    else:
        # Par d√©faut : GUI
        run_gui_mode(config)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        if logger:
            logger.info("\n\nüëã Arr√™t du bot...\n")
        else:
            print("\n\nüëã Arr√™t du bot...\n")
        sys.exit(0)
    except Exception as e:
        if logger:
            logger.error(f"\n‚ùå Erreur fatale : {e}\n", exc_info=True)
        else:
            print(f"\n‚ùå Erreur fatale : {e}\n")
        sys.exit(1)
