#!/usr/bin/env python3
"""
FIX COMPLET - Corrige TOUS les probl√®mes
1. Bouton r√©sum√© utilisant NotificationGenerator
2. Gestionnaire de cryptos
3. Sauvegarde des notifications qui fonctionne
4. Ajout des boutons manquants dans settings
"""

import os
import shutil
from pathlib import Path
from datetime import datetime


def backup_files():
    """Cr√©e une sauvegarde"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = Path(f"backups/fix_complet_{timestamp}")
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    files_to_backup = [
        "ui/main_window.py",
        "ui/settings_window.py",
        "core/services/advanced_notification_config_window.py"
    ]
    
    for file in files_to_backup:
        src = Path(file)
        if src.exists():
            dst = backup_dir / file
            dst.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(src, dst)
    
    print(f"‚úÖ Sauvegarde cr√©√©e dans {backup_dir}")
    return backup_dir


def create_crypto_manager():
    """Cr√©e le gestionnaire de cryptos"""
    
    content = '''"""
Gestionnaire de cryptomonnaies - Version compl√®te
"""

from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QFormLayout, QLabel,
    QPushButton, QListWidget, QGroupBox, QDoubleSpinBox,
    QLineEdit, QCheckBox, QMessageBox, QInputDialog
)
from PyQt6.QtGui import QFont
from core.models import BotConfiguration


class CryptoManagerWindow(QDialog):
    """Fen√™tre de gestion des cryptomonnaies"""
    
    def __init__(self, config: BotConfiguration, parent=None):
        super().__init__(parent)
        self.config = config
        self.setWindowTitle("üí∞ Gestion des Cryptomonnaies")
        self.resize(800, 600)
        self._init_ui()
    
    def _init_ui(self):
        layout = QVBoxLayout(self)
        
        # En-t√™te
        header = QLabel("üí∞ G√®re tes cryptomonnaies")
        header_font = QFont()
        header_font.setPointSize(16)
        header_font.setBold(True)
        header.setFont(header_font)
        layout.addWidget(header)
        
        desc = QLabel(
            "Ajoute, configure ou supprime des cryptomonnaies. "
            "Tu peux configurer chaque crypto ind√©pendamment ou appliquer "
            "les m√™mes param√®tres √† toutes."
        )
        desc.setWordWrap(True)
        layout.addWidget(desc)
        
        # Liste des cryptos
        list_group = QGroupBox("üìã Mes cryptos")
        list_layout = QVBoxLayout()
        
        self.crypto_list = QListWidget()
        self._refresh_crypto_list()
        list_layout.addWidget(self.crypto_list)
        
        # Boutons de gestion
        btn_layout = QHBoxLayout()
        
        add_btn = QPushButton("‚ûï Ajouter")
        add_btn.clicked.connect(self._add_crypto)
        btn_layout.addWidget(add_btn)
        
        edit_btn = QPushButton("‚úèÔ∏è Configurer")
        edit_btn.clicked.connect(self._edit_crypto)
        btn_layout.addWidget(edit_btn)
        
        remove_btn = QPushButton("üóëÔ∏è Supprimer")
        remove_btn.clicked.connect(self._remove_crypto)
        btn_layout.addWidget(remove_btn)
        
        list_layout.addLayout(btn_layout)
        list_group.setLayout(list_layout)
        layout.addWidget(list_group)
        
        # Configuration globale
        global_group = QGroupBox("‚öôÔ∏è Configuration globale")
        global_layout = QFormLayout()
        
        self.global_investment = QDoubleSpinBox()
        self.global_investment.setRange(0, 1000000)
        self.global_investment.setValue(self.config.investment_amount)
        self.global_investment.setSuffix(" ‚Ç¨")
        global_layout.addRow("Montant d'investissement par d√©faut:", self.global_investment)
        
        apply_global_btn = QPushButton("üì¢ Appliquer √† toutes les cryptos")
        apply_global_btn.clicked.connect(self._apply_global_settings)
        global_layout.addRow("", apply_global_btn)
        
        global_group.setLayout(global_layout)
        layout.addWidget(global_group)
        
        # Boutons OK/Annuler
        btn_layout = QHBoxLayout()
        
        save_btn = QPushButton("üíæ Sauvegarder")
        save_btn.clicked.connect(self.accept)
        btn_layout.addWidget(save_btn)
        
        cancel_btn = QPushButton("‚ùå Annuler")
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(cancel_btn)
        
        layout.addLayout(btn_layout)
    
    def _refresh_crypto_list(self):
        """Rafra√Æchit la liste des cryptos"""
        self.crypto_list.clear()
        for symbol in self.config.crypto_symbols:
            investment = self.config.coin_settings.get(symbol, {}).get(
                'investment_amount',
                self.config.investment_amount
            )
            
            include = self.config.coin_settings.get(symbol, {}).get(
                'include_summary',
                True
            )
            
            status = "‚úÖ" if include else "‚è∏Ô∏è"
            self.crypto_list.addItem(
                f"{status} {symbol} - {investment:.0f}‚Ç¨"
            )
    
    def _add_crypto(self):
        """Ajoute une nouvelle crypto"""
        symbol, ok = QInputDialog.getText(
            self,
            "Ajouter une crypto",
            "Symbole de la crypto (ex: BTC, ETH, SOL, ADA):"
        )
        
        if ok and symbol:
            symbol = symbol.upper().strip()
            
            if not symbol:
                QMessageBox.warning(self, "Erreur", "Le symbole ne peut pas √™tre vide")
                return
            
            if symbol in self.config.crypto_symbols:
                QMessageBox.warning(self, "Erreur", f"{symbol} est d√©j√† dans la liste")
                return
            
            self.config.crypto_symbols.append(symbol)
            
            if symbol not in self.config.coin_settings:
                self.config.coin_settings[symbol] = {}
            
            self.config.coin_settings[symbol]['investment_amount'] = self.config.investment_amount
            self.config.coin_settings[symbol]['notification_hours'] = self.config.summary_hours
            self.config.coin_settings[symbol]['include_summary'] = True
            
            self._refresh_crypto_list()
            
            QMessageBox.information(self, "Succ√®s", f"‚úÖ {symbol} ajout√© avec succ√®s !")
    
    def _edit_crypto(self):
        """√âdite la configuration d'une crypto"""
        current_item = self.crypto_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "S√©lection", "S√©lectionne d'abord une crypto √† configurer")
            return
        
        text = current_item.text()
        symbol = text.split(" ")[1]
        
        dialog = CryptoConfigDialog(symbol, self.config, self)
        if dialog.exec():
            self._refresh_crypto_list()
    
    def _remove_crypto(self):
        """Supprime une crypto"""
        current_item = self.crypto_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "S√©lection", "S√©lectionne d'abord une crypto √† supprimer")
            return
        
        text = current_item.text()
        symbol = text.split(" ")[1]
        
        reply = QMessageBox.question(
            self,
            "Confirmation",
            f"Supprimer {symbol} de la liste ?\n\nCette action est irr√©versible.",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            self.config.crypto_symbols.remove(symbol)
            
            if symbol in self.config.coin_settings:
                del self.config.coin_settings[symbol]
            
            self._refresh_crypto_list()
            
            QMessageBox.information(self, "Succ√®s", f"‚úÖ {symbol} supprim√©")
    
    def _apply_global_settings(self):
        """Applique les param√®tres globaux √† toutes les cryptos"""
        investment = self.global_investment.value()
        
        reply = QMessageBox.question(
            self,
            "Confirmation",
            f"Appliquer {investment:.0f}‚Ç¨ comme montant d'investissement "
            f"pour toutes les {len(self.config.crypto_symbols)} cryptos ?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            for symbol in self.config.crypto_symbols:
                if symbol not in self.config.coin_settings:
                    self.config.coin_settings[symbol] = {}
                
                self.config.coin_settings[symbol]['investment_amount'] = investment
            
            self.config.investment_amount = investment
            
            self._refresh_crypto_list()
            
            QMessageBox.information(self, "Succ√®s", f"‚úÖ Configuration appliqu√©e √† toutes les cryptos")


class CryptoConfigDialog(QDialog):
    """Dialogue de configuration individuelle"""
    
    def __init__(self, symbol: str, config: BotConfiguration, parent=None):
        super().__init__(parent)
        self.symbol = symbol
        self.config = config
        self.setWindowTitle(f"‚öôÔ∏è Configuration de {symbol}")
        self.resize(500, 400)
        self._init_ui()
    
    def _init_ui(self):
        layout = QVBoxLayout(self)
        
        title = QLabel(f"üíé {self.symbol}")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title.setFont(title_font)
        layout.addWidget(title)
        
        form_layout = QFormLayout()
        
        self.investment_spin = QDoubleSpinBox()
        self.investment_spin.setRange(0, 1000000)
        self.investment_spin.setSuffix(" ‚Ç¨")
        current_investment = self.config.coin_settings.get(self.symbol, {}).get(
            'investment_amount',
            self.config.investment_amount
        )
        self.investment_spin.setValue(current_investment)
        form_layout.addRow("üí∞ Montant d'investissement:", self.investment_spin)
        
        self.hours_edit = QLineEdit()
        current_hours = self.config.coin_settings.get(self.symbol, {}).get(
            'notification_hours',
            self.config.summary_hours
        )
        self.hours_edit.setText(", ".join(map(str, current_hours)))
        self.hours_edit.setPlaceholderText("Ex: 9, 12, 18")
        form_layout.addRow("üïê Heures de notification:", self.hours_edit)
        
        self.include_check = QCheckBox("Inclure dans les r√©sum√©s automatiques")
        self.include_check.setChecked(
            self.config.coin_settings.get(self.symbol, {}).get('include_summary', True)
        )
        form_layout.addRow("üìä", self.include_check)
        
        layout.addLayout(form_layout)
        
        help_text = QLabel(
            "üí° Les heures de notification sont en format 24h (0-23). "
            "S√©pare-les par des virgules."
        )
        help_text.setWordWrap(True)
        help_text.setStyleSheet("color: gray; font-size: 10pt;")
        layout.addWidget(help_text)
        
        layout.addStretch()
        
        btn_layout = QHBoxLayout()
        
        save_btn = QPushButton("üíæ Sauvegarder")
        save_btn.clicked.connect(self._save)
        btn_layout.addWidget(save_btn)
        
        cancel_btn = QPushButton("‚ùå Annuler")
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(cancel_btn)
        
        layout.addLayout(btn_layout)
    
    def _save(self):
        """Sauvegarde la configuration"""
        try:
            hours_text = self.hours_edit.text()
            hours = []
            
            for h in hours_text.split(','):
                h = h.strip()
                if h.isdigit():
                    hour = int(h)
                    if 0 <= hour <= 23:
                        hours.append(hour)
            
            if not hours:
                QMessageBox.warning(
                    self,
                    "Erreur",
                    "Les heures doivent √™tre entre 0 et 23, s√©par√©es par des virgules"
                )
                return
            
            if self.symbol not in self.config.coin_settings:
                self.config.coin_settings[self.symbol] = {}
            
            self.config.coin_settings[self.symbol]['investment_amount'] = self.investment_spin.value()
            self.config.coin_settings[self.symbol]['notification_hours'] = sorted(set(hours))
            self.config.coin_settings[self.symbol]['include_summary'] = self.include_check.isChecked()
            
            QMessageBox.information(self, "Succ√®s", f"‚úÖ Configuration de {self.symbol} sauvegard√©e")
            
            self.accept()
        
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors de la sauvegarde :\n{e}")
'''
    
    file_path = Path("ui/crypto_manager_window.py")
    file_path.write_text(content, encoding='utf-8')
    print(f"‚úÖ Cr√©√© {file_path}")


def fix_notification_save():
    """Corrige la sauvegarde des notifications dans advanced_notification_config_window.py"""
    
    file_path = Path("core/services/advanced_notification_config_window.py")
    if not file_path.exists():
        print(f"‚ùå Fichier non trouv√©: {file_path}")
        return
    
    content = file_path.read_text(encoding='utf-8')
    
    # Chercher la m√©thode accept() et la remplacer si elle n'appelle pas _save_to_file
    old_accept = '''    def accept(self):
        """Valide et ferme le dialogue"""
        try:
            self._collect_settings_from_ui()
            self._collect_coin_settings_from_ui()
            super().accept()
        except ValueError as e:
            QMessageBox.warning(self, "Validation", str(e))'''
    
    new_accept = '''    def accept(self):
        """Valide, sauvegarde et ferme le dialogue"""
        try:
            self._collect_settings_from_ui()
            self._collect_coin_settings_from_ui()
            self._save_to_file()  # AJOUT: Sauvegarde dans le fichier YAML
            super().accept()
        except ValueError as e:
            QMessageBox.warning(self, "Validation", str(e))
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors de la sauvegarde:\\n{e}")'''
    
    if old_accept in content:
        content = content.replace(old_accept, new_accept)
    
    # Ajouter la m√©thode _save_to_file si elle n'existe pas
    if "_save_to_file" not in content:
        save_method = '''
    def _save_to_file(self):
        """Sauvegarde les param√®tres dans config/notifications.yaml"""
        import yaml
        from pathlib import Path
        
        notif_config_path = Path("config/notifications.yaml")
        notif_config_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Pr√©parer les donn√©es √† sauvegarder
        data = {
            'enabled': self.settings.enabled,
            'kid_friendly_mode': self.settings.kid_friendly_mode,
            'use_emojis_everywhere': self.settings.use_emojis_everywhere,
            'explain_everything': self.settings.explain_everything,
            'respect_quiet_hours': self.settings.respect_quiet_hours,
            'quiet_start': self.settings.quiet_start,
            'quiet_end': self.settings.quiet_end,
            'default_scheduled_hours': self.settings.default_scheduled_hours
        }
        
        # Sauvegarder dans le fichier
        with open(notif_config_path, 'w', encoding='utf-8') as f:
            yaml.dump(data, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        
        print(f"‚úÖ Configuration des notifications sauvegard√©e dans {notif_config_path}")
'''
        
        # Ins√©rer avant la derni√®re ligne de la classe
        insert_pos = content.rfind("    def accept(self):")
        if insert_pos > 0:
            content = content[:insert_pos] + save_method + "\n" + content[insert_pos:]
    
    file_path.write_text(content, encoding='utf-8')
    print(f"‚úÖ Sauvegarde des notifications corrig√©e dans {file_path}")


def fix_settings_window():
    """Ajoute le bouton crypto manager dans settings_window.py"""
    
    file_path = Path("ui/settings_window.py")
    if not file_path.exists():
        print(f"‚ùå Fichier non trouv√©: {file_path}")
        return
    
    content = file_path.read_text(encoding='utf-8')
    
    # Ajouter l'import si n√©cessaire
    if "from ui.crypto_manager_window import CryptoManagerWindow" not in content:
        import_pos = content.find("from core.models")
        if import_pos > 0:
            content = (
                content[:import_pos] +
                "from ui.crypto_manager_window import CryptoManagerWindow\n" +
                content[import_pos:]
            )
    
    # Modifier la section crypto pour ajouter le bouton
    old_section = '''    def _create_crypto_section(self):
        """Cr√©e la section crypto"""
        group = QGroupBox("Cryptomonnaies")
        layout = QFormLayout()
        
        self._line_edits["crypto_symbols"] = QLineEdit()
        layout.addRow("Symboles (s√©par√©s par ,):", self._line_edits["crypto_symbols"])'''
    
    new_section = '''    def _create_crypto_section(self):
        """Cr√©e la section crypto"""
        group = QGroupBox("Cryptomonnaies")
        layout = QFormLayout()
        
        # Bouton de gestion centralis√©e
        manage_btn = QPushButton("üí∞ G√©rer les cryptomonnaies")
        manage_btn.clicked.connect(self._open_crypto_manager)
        layout.addRow("", manage_btn)
        
        # Affichage en lecture seule
        self._line_edits["crypto_symbols"] = QLineEdit()
        self._line_edits["crypto_symbols"].setReadOnly(True)
        layout.addRow("Cryptos suivies:", self._line_edits["crypto_symbols"])'''
    
    if old_section in content:
        content = content.replace(old_section, new_section)
    
    # Ajouter la m√©thode _open_crypto_manager si elle n'existe pas
    if "_open_crypto_manager" not in content:
        new_method = '''
    def _open_crypto_manager(self):
        """Ouvre le gestionnaire de cryptos"""
        dialog = CryptoManagerWindow(self.config, self)
        if dialog.exec():
            # Sauvegarder la configuration
            from config.config_manager import ConfigManager
            config_manager = ConfigManager()
            config_manager.save_config(self.config)
            
            # Mettre √† jour l'affichage
            self._line_edits["crypto_symbols"].setText(", ".join(self.config.crypto_symbols))
            
            QMessageBox.information(
                self,
                "Succ√®s",
                "Configuration des cryptos mise √† jour et sauvegard√©e"
            )
'''
        
        # Ins√©rer avant _on_save_clicked
        insert_pos = content.find("    def _on_save_clicked(self):")
        if insert_pos > 0:
            content = content[:insert_pos] + new_method + "\n" + content[insert_pos:]
    
    file_path.write_text(content, encoding='utf-8')
    print(f"‚úÖ Bouton gestionnaire de cryptos ajout√© dans {file_path}")


def fix_main_window_summary():
    """Corrige le bouton r√©sum√© dans main_window.py"""
    
    file_path = Path("ui/main_window.py")
    if not file_path.exists():
        print(f"‚ùå Fichier non trouv√©: {file_path}")
        return
    
    content = file_path.read_text(encoding='utf-8')
    
    # Chercher et remplacer la m√©thode _send_summary
    # On cherche le d√©but et la fin de la m√©thode
    start_marker = "    def _send_summary(self):"
    end_marker = "            )\n    \n    def _generate_report(self):"
    
    start_pos = content.find(start_marker)
    end_pos = content.find(end_marker)
    
    if start_pos > 0 and end_pos > start_pos:
        new_method = '''    def _send_summary(self):
        """Envoie un r√©sum√© complet sur Telegram (utilise NotificationGenerator)"""
        try:
            if not self.daemon_service or not self.daemon_service.notification_generator:
                QMessageBox.warning(
                    self,
                    "Service non initialis√©",
                    "D√©marre d'abord le daemon pour initialiser le syst√®me de notifications."
                )
                return
            
            current_hour = datetime.now(timezone.utc).hour
            current_day = datetime.now(timezone.utc).weekday()
            
            # Collecter les donn√©es
            markets_data = {}
            predictions = {}
            opportunities = {}
            
            for symbol in self.config.crypto_symbols:
                if symbol in self.market_data_cache:
                    market = self.market_data_cache[symbol]
                    markets_data[symbol] = market
                    
                    prediction = self.predictions_cache.get(symbol) or \\
                                self.market_service.predict_price_movement(market)
                    opportunity = self.opportunities_cache.get(symbol) or \\
                                 self.market_service.calculate_opportunity_score(market, prediction)
                    
                    if prediction:
                        predictions[symbol] = prediction
                        self.predictions_cache[symbol] = prediction
                    if opportunity:
                        opportunities[symbol] = opportunity
                        self.opportunities_cache[symbol] = opportunity
            
            if not markets_data:
                QMessageBox.warning(self, "Aucune donn√©e", "Rafra√Æchis d'abord les donn√©es")
                return
            
            # G√©n√©rer et envoyer les notifications
            sent_count = 0
            for symbol in self.config.crypto_symbols:
                if symbol not in markets_data:
                    continue
                
                notification = self.daemon_service.notification_generator.generate_notification(
                    symbol=symbol,
                    market=markets_data[symbol],
                    prediction=predictions.get(symbol),
                    opportunity=opportunities.get(symbol),
                    all_markets=markets_data,
                    all_predictions=predictions,
                    all_opportunities=opportunities,
                    current_hour=current_hour,
                    current_day_of_week=current_day
                )
                
                if notification:
                    success = self.telegram_api.send_message(notification, parse_mode="HTML")
                    if success:
                        sent_count += 1
            
            if sent_count > 0:
                QMessageBox.information(
                    self,
                    "R√©sum√© envoy√©",
                    f"‚úÖ {sent_count} notification(s) envoy√©e(s) sur Telegram !"
                )
            else:
                QMessageBox.warning(self, "Erreur", "Aucune notification n'a pu √™tre envoy√©e")
        
        except Exception as e:
            self.logger.error(f"Erreur envoi r√©sum√©: {e}")
            QMessageBox.critical(self, "Erreur", f"Impossible d'envoyer le r√©sum√© : {e}")'''
        
        content = content[:start_pos] + new_method + "\n    \n" + content[end_pos:]
        file_path.write_text(content, encoding='utf-8')
        print(f"‚úÖ M√©thode _send_summary corrig√©e dans {file_path}")
    else:
        print(f"‚ö†Ô∏è M√©thode _send_summary non trouv√©e pour remplacement")


def main():
    """Fonction principale"""
    print("=" * 60)
    print("üöÄ FIX COMPLET - Correction de TOUS les probl√®mes")
    print("=" * 60)
    print()
    
    # Sauvegarde
    backup_dir = backup_files()
    print()
    
    # Corrections
    print("üìù Application des correctifs...")
    print()
    
    create_crypto_manager()
    fix_notification_save()
    fix_settings_window()
    fix_main_window_summary()
    
    print()
    print("=" * 60)
    print("‚úÖ TOUS LES CORRECTIFS APPLIQU√âS!")
    print("=" * 60)
    print()
    print("üìã R√©sum√© :")
    print("  ‚úÖ Gestionnaire de cryptos cr√©√©")
    print("  ‚úÖ Sauvegarde des notifications corrig√©e")
    print("  ‚úÖ Bouton 'G√©rer les cryptomonnaies' ajout√©")
    print("  ‚úÖ M√©thode _send_summary am√©lior√©e")
    print()
    print("üéØ Teste maintenant :")
    print("  1. python main.py")
    print("  2. ‚öôÔ∏è Param√®tres > G√©rer les cryptomonnaies")
    print("  3. üîî Config notifications > Enregistrer")
    print("  4. ‚ñ∂Ô∏è D√©marrer daemon > üìä Envoyer r√©sum√©")
    print()
    print(f"üíæ Sauvegarde: {backup_dir}")
    print()


if __name__ == "__main__":
    main()
