"""
Report Service - G√©n√©ration de rapports complets
"""

from typing import Dict, List
from datetime import datetime, timedelta
from core.models import MarketData, Prediction, OpportunityScore
from io import StringIO


class ReportService:
    """Service de g√©n√©ration de rapports"""
    
    def generate_complete_report(self,
                                 markets_data: Dict[str, MarketData],
                                 predictions: Dict[str, Prediction],
                                 opportunities: Dict[str, OpportunityScore],
                                 stats: Dict = None) -> str:
        """G√©n√®re un rapport complet"""
        
        report = StringIO()
        
        # En-t√™te
        report.write("=" * 70 + "\n")
        report.write("RAPPORT COMPLET - CRYPTO BOT v3.0\n")
        report.write(f"{datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
        report.write("=" * 70 + "\n\n")
        
        # R√©sum√© ex√©cutif
        report.write(self._generate_executive_summary(markets_data, opportunities))
        report.write("\n")
        
        # Analyse par crypto
        for symbol in sorted(markets_data.keys()):
            market = markets_data[symbol]
            prediction = predictions.get(symbol)
            opportunity = opportunities.get(symbol)
            
            report.write(self._generate_crypto_section(symbol, market, prediction, opportunity))
            report.write("\n")
        
        # Comparaison
        report.write(self._generate_comparison_section(markets_data, opportunities))
        report.write("\n")
        
        # Recommandations
        report.write(self._generate_recommendations(markets_data, opportunities))
        report.write("\n")
        
        # Statistiques
        if stats:
            report.write(self._generate_stats_section(stats))
            report.write("\n")
        
        # Pied de page
        report.write("=" * 70 + "\n")
        report.write("Fin du rapport\n")
        report.write("=" * 70 + "\n")
        
        return report.getvalue()
    
    def _generate_executive_summary(self, markets_data: Dict[str, MarketData],
                                   opportunities: Dict[str, OpportunityScore]) -> str:
        """R√©sum√© ex√©cutif"""
        
        summary = "üìä R√âSUM√â EX√âCUTIF\n"
        summary += "-" * 70 + "\n\n"
        
        # Meilleure opportunit√©
        best_opp = max(opportunities.items(), key=lambda x: x[1].score)
        summary += f"üéØ Meilleure opportunit√© : {best_opp[0]} (Score: {best_opp[1].score}/10)\n"
        
        # Pire opportunit√©
        worst_opp = min(opportunities.items(), key=lambda x: x[1].score)
        summary += f"‚ö†Ô∏è √Ä √©viter : {worst_opp[0]} (Score: {worst_opp[1].score}/10)\n\n"
        
        # Tendance g√©n√©rale
        avg_change = sum(m.current_price.change_24h for m in markets_data.values()) / len(markets_data)
        trend = "üìà Haussi√®re" if avg_change > 0 else "üìâ Baissi√®re"
        summary += f"Tendance g√©n√©rale 24h : {trend} ({avg_change:+.2f}%)\n\n"
        
        return summary
    
    def _generate_crypto_section(self, symbol: str, market: MarketData,
                                prediction: Prediction, opportunity: OpportunityScore) -> str:
        """Section pour une crypto"""
        
        section = f"{'‚îÅ' * 70}\n"
        section += f"üíé {symbol}\n"
        section += f"{'‚îÅ' * 70}\n\n"
        
        # Prix et changement
        price = market.current_price
        section += f"Prix actuel : {price.price_eur:.2f}‚Ç¨\n"
        section += f"Changement 24h : {price.change_24h:+.2f}%\n"
        section += f"Volume 24h : {price.volume_24h:,.0f}\n\n"
        
        # Indicateurs techniques
        ti = market.technical_indicators
        section += "Indicateurs techniques :\n"
        section += f"  ‚Ä¢ RSI : {ti.rsi:.0f}"
        if ti.rsi < 30:
            section += " (survendu üü¢)\n"
        elif ti.rsi > 70:
            section += " (surachet√© üî¥)\n"
        else:
            section += "\n"
        
        section += f"  ‚Ä¢ MA20 : {ti.ma20:.2f}‚Ç¨\n"
        section += f"  ‚Ä¢ Support : {ti.support:.2f}‚Ç¨\n"
        section += f"  ‚Ä¢ R√©sistance : {ti.resistance:.2f}‚Ç¨\n\n"
        
        # Pr√©diction
        if prediction:
            section += f"üîÆ Pr√©diction : {prediction.direction} {prediction.prediction_type.value}\n"
            section += f"   Confiance : {prediction.confidence}%\n"
            section += f"   Cible haute : {prediction.target_high:.2f}‚Ç¨\n"
            section += f"   Cible basse : {prediction.target_low:.2f}‚Ç¨\n\n"
        
        # Opportunit√©
        if opportunity:
            section += f"‚≠ê Score opportunit√© : {opportunity.score}/10\n"
            section += f"   {opportunity.recommendation}\n\n"
            
            if opportunity.reasons:
                section += "   Raisons :\n"
                for reason in opportunity.reasons:
                    section += f"   ‚Ä¢ {reason}\n"
                section += "\n"
        
        # Fear & Greed
        if market.fear_greed_index:
            section += f"üò± Fear & Greed Index : {market.fear_greed_index}/100\n\n"
        
        return section
    
    def _generate_comparison_section(self, markets_data: Dict[str, MarketData],
                                    opportunities: Dict[str, OpportunityScore]) -> str:
        """Section comparative"""
        
        section = "üìä COMPARAISON\n"
        section += "-" * 70 + "\n\n"
        
        # Tableau comparatif
        section += f"{'Symbole':<10} {'Prix':<12} {'24h':<10} {'RSI':<8} {'Score':<8}\n"
        section += "-" * 70 + "\n"
        
        for symbol in sorted(markets_data.keys()):
            market = markets_data[symbol]
            opp = opportunities.get(symbol)
            
            price = market.current_price.price_eur
            change = market.current_price.change_24h
            rsi = market.technical_indicators.rsi
            score = opp.score if opp else 0
            
            section += f"{symbol:<10} {price:<12.2f} {change:>+6.2f}% {rsi:>6.0f} {score:>6}/10\n"
        
        section += "\n"
        return section
    
    def _generate_recommendations(self, markets_data: Dict[str, MarketData],
                                 opportunities: Dict[str, OpportunityScore]) -> str:
        """Recommandations"""
        
        section = "üí° RECOMMANDATIONS\n"
        section += "-" * 70 + "\n\n"
        
        # Trier par score d'opportunit√©
        sorted_opps = sorted(opportunities.items(), key=lambda x: x[1].score, reverse=True)
        
        # Achats recommand√©s
        section += "√Ä acheter maintenant :\n"
        buy_recommendations = [item for item in sorted_opps if item[1].score >= 7]
        
        if buy_recommendations:
            for symbol, opp in buy_recommendations:
                market = markets_data[symbol]
                section += f"  ‚úÖ {symbol} √† {market.current_price.price_eur:.2f}‚Ç¨ "
                section += f"(Score: {opp.score}/10)\n"
        else:
            section += "  Aucune opportunit√© excellente actuellement\n"
        
        section += "\n"
        
        # √Ä surveiller
        section += "√Ä surveiller :\n"
        watch_recommendations = [item for item in sorted_opps if 5 <= item[1].score < 7]
        
        if watch_recommendations:
            for symbol, opp in watch_recommendations[:3]:
                market = markets_data[symbol]
                section += f"  üëÄ {symbol} √† {market.current_price.price_eur:.2f}‚Ç¨ "
                section += f"(Score: {opp.score}/10)\n"
        else:
            section += "  Aucune crypto √† surveiller particuli√®rement\n"
        
        section += "\n"
        
        # √Ä √©viter
        section += "√Ä √©viter pour le moment :\n"
        avoid_recommendations = [item for item in sorted_opps if item[1].score < 5]
        
        if avoid_recommendations:
            for symbol, opp in avoid_recommendations:
                section += f"  ‚ùå {symbol} (Score: {opp.score}/10)\n"
        else:
            section += "  Toutes les cryptos ont un score correct\n"
        
        section += "\n"
        
        return section
    
    def _generate_stats_section(self, stats: Dict) -> str:
        """Section statistiques"""
        
        section = "üìà STATISTIQUES\n"
        section += "-" * 70 + "\n\n"
        
        section += f"V√©rifications totales : {stats.get('total_checks', 0)}\n"
        section += f"Alertes envoy√©es : {stats.get('total_alerts', 0)}\n"
        section += f"Erreurs : {stats.get('total_errors', 0)}\n"
        section += f"Moyenne v√©rifications/jour : {stats.get('avg_checks_per_day', 0):.1f}\n\n"
        
        return section
    
    def generate_html_report(self, text_report: str) -> str:
        """Convertit le rapport en HTML"""
        
        html = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Crypto Bot Report</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            background: #1e1e1e;
            color: #d4d4d4;
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        .header {
            border-bottom: 2px solid #007acc;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìä Crypto Bot Report</h1>
    </div>
    <pre>{}</pre>
</body>
</html>
        """.format(text_report)
        
        return html
