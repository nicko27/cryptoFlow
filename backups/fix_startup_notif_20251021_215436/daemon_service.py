"""
Daemon Service - Ex√©cution en arri√®re-plan avec gestion d'erreurs robuste
FIXED: Imports timezone, signal handlers thread-safe, m√©thode _dict_to_notification_settings
"""

import time
import signal
from datetime import datetime, timezone  # FIXED: Probl√®me 1 - Import simple de timezone
from typing import Optional, Dict, Any, List
from threading import Event, Lock
import yaml
from pathlib import Path

from core.models import BotConfiguration, AlertLevel, MarketData, Prediction, OpportunityScore
from api.binance_api import BinanceAPI
from core.services.market_service import MarketService
from core.services.alert_service import AlertService
from utils.logger import setup_logger
from core.services.database_service import DatabaseService
from core.services.chart_service import ChartService
from api.enhanced_telegram_api import EnhancedTelegramAPI
from core.services.dca_service import DCAService
from core.services.notification_generator import NotificationGenerator
from core.services.summary_service import SummaryService
from core.models.notification_config import GlobalNotificationSettings


class DaemonService:
    def __init__(self, config: BotConfiguration):
        self.config = config

        # √âtat d'ex√©cution
        self.is_running = False
        self.stop_event = Event()
        self.start_time: Optional[datetime] = None
        self.last_check_time: Optional[datetime] = None
        self.last_summary_sent: Optional[datetime] = None
        self.checks_count = 0
        self.alerts_sent = 0
        self.notifications_sent = 0  # Compteur de notifications
        self.errors_count = 0
        self.consecutive_errors = 0
        self.last_error: Optional[str] = None
        
        # FIXED: Probl√®me 20 - Lock pour thread-safety
        self._state_lock = Lock()

        # Logger
        self.logger = setup_logger(
            name="CryptoBotDaemon",
            log_file=config.log_file,
            level=config.log_level
        )

        # Services principaux
        self.binance_api = BinanceAPI()
        self.market_service = MarketService(self.binance_api)
        self.alert_service = AlertService(config)
        self.db_service = DatabaseService(config.database_path)
        self.chart_service = ChartService()
        self.dca_service = DCAService()
        self.summary_service = SummaryService(config)
        self.telegram_api = EnhancedTelegramAPI(
            config.telegram_bot_token,
            config.telegram_chat_id,
            message_delay=config.telegram_message_delay
        )
        initial_settings = self._load_notification_settings()
        self.update_notification_settings(initial_settings)

        # FIXED: Probl√®me 20 - Gestion des signaux syst√®me thread-safe
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _load_notification_settings(self) -> GlobalNotificationSettings:
        """Charge les param√®tres de notification depuis YAML"""
        notif_config_path = "config/notifications.yaml"
        
        if Path(notif_config_path).exists():
            try:
                with open(notif_config_path, 'r', encoding='utf-8') as f:
                    data = yaml.safe_load(f)
                return self._dict_to_notification_settings(data)
            except Exception as e:
                self.logger.error(f"Erreur chargement notifications: {e}")
        
        # Config par d√©faut
        return GlobalNotificationSettings(
            enabled=True,
            kid_friendly_mode=True,
            use_emojis_everywhere=True,
            explain_everything=True,
            respect_quiet_hours=True,
            quiet_start=23,
            quiet_end=7,
            default_scheduled_hours=[9, 12, 18]
        )
    
    def _dict_to_notification_settings(self, data: dict) -> GlobalNotificationSettings:
        """
        FIXED: Probl√®me 8 - M√©thode impl√©ment√©e
        Convertit un dictionnaire YAML en GlobalNotificationSettings
        """
        def _normalize_hours(value):
            hours: List[int] = []
            if isinstance(value, (int, float)):
                hours.append(int(value))
            elif isinstance(value, str):
                for part in value.replace(";", ",").split(","):
                    part = part.strip()
                    if part.isdigit():
                        hours.append(int(part))
            elif isinstance(value, list):
                for item in value:
                    if isinstance(item, (int, float)):
                        hours.append(int(item))
                    elif isinstance(item, str) and item.strip().isdigit():
                        hours.append(int(item.strip()))
            return sorted({h for h in hours if 0 <= h <= 23})

        hours = _normalize_hours(data.get('default_scheduled_hours', [9, 12, 18])) or [9, 12, 18]
        quiet_start = int(data.get('quiet_start', 23) or 0)
        quiet_end = int(data.get('quiet_end', 7) or 0)
        quiet_start = max(0, min(23, quiet_start))
        quiet_end = max(0, min(23, quiet_end))

        return GlobalNotificationSettings(
            enabled=data.get('enabled', True),
            kid_friendly_mode=data.get('kid_friendly_mode', True),
            use_emojis_everywhere=data.get('use_emojis_everywhere', True),
            explain_everything=data.get('explain_everything', True),
            respect_quiet_hours=data.get('respect_quiet_hours', True),
            quiet_start=quiet_start,
            quiet_end=quiet_end,
            default_scheduled_hours=hours
        )

    def update_notification_settings(self, settings: GlobalNotificationSettings) -> None:
        """Met √† jour les param√®tres de notification et r√©g√©n√®re le g√©n√©rateur associ√©."""
        with self._state_lock:
            self.notification_settings = settings
            self.notification_generator = NotificationGenerator(
                settings,
                self.config.crypto_symbols,
            )

    def update_configuration(self, config: BotConfiguration) -> None:
        """Met √† jour les services internes avec une nouvelle configuration."""
        with self._state_lock:
            self.config = config
            # Recr√©er les services si n√©cessaire
            self.alert_service = AlertService(config)
            self.notification_generator = NotificationGenerator(
                self.notification_settings,
                config.crypto_symbols,
            )
            self.logger.info("Configuration mise √† jour")

    def _signal_handler(self, signum, frame):
        """
        FIXED: Probl√®me 20 - Gestionnaire de signaux thread-safe
        G√®re les signaux syst√®me (SIGINT, SIGTERM)
        """
        signal_name = signal.Signals(signum).name
        self.logger.info(f"Signal {signum} ({signal_name}) re√ßu, arr√™t du d√©mon...")
        
        # Thread-safe stop
        with self._state_lock:
            self.is_running = False
            self.stop_event.set()

    def start(self):
        """D√©marre le d√©mon en arri√®re-plan"""
        
        with self._state_lock:
            if self.is_running:
                self.logger.warning("Le d√©mon est d√©j√† en cours d'ex√©cution")
                return
            
            self.is_running = True
            self.start_time = datetime.now(timezone.utc)  # FIXED: Probl√®me 2 - timezone.utc
        
        self.logger.info("\n" + "="*60)
        self.logger.info("üöÄ CRYPTO BOT DAEMON D√âMARR√â")
        self.logger.info("="*60)
        self.logger.info(f"Cryptos surveill√©es : {', '.join(self.config.crypto_symbols)}")
        self.logger.info(f"Intervalle : {self.config.check_interval_seconds}s")
        self.logger.info(f"Mode nuit : {'Activ√©' if self.config.enable_night_mode else 'D√©sactiv√©'}")
        self.logger.info("="*60)
        
        # Test connexion Telegram
        if not self._test_telegram_connection():
            self.logger.error("‚ùå Connexion Telegram √©chou√©e ! V√©rifiez votre configuration.")
            with self._state_lock:
                self.is_running = False
            self.stop()
            return
        
        # Message de d√©marrage
        if self.config.enable_startup_summary:
            self._send_startup_message()
        
        # Boucle principale avec gestion d'erreurs robuste
        self._run_loop()
    
    def _test_telegram_connection(self) -> bool:
        """Teste la connexion Telegram"""
        try:
            self.logger.info("üîç Test de connexion Telegram...")
            
            # FIXED: Probl√®me 3 - V√©rifier que la m√©thode existe
            if hasattr(self.telegram_api, 'get_bot_info'):
                bot_info = self.telegram_api.get_bot_info()
                self.logger.info(f"‚úì Connect√© au bot: @{bot_info.get('username', 'Unknown')}")
            else:
                # Fallback: tester avec un message
                self.telegram_api.send_message("‚úÖ Test de connexion r√©ussi")
                self.logger.info("‚úì Connexion Telegram OK")
            
            return True
        except Exception as e:
            self.logger.error(f"Erreur test Telegram : {e}")
            return False
    
    def _run_loop(self):
        """
        FIXED: Probl√®me 14 & 15 - Boucle principale am√©lior√©e
        avec meilleure gestion des erreurs et logging
        """
        retry_delay = 60
        last_log_time = datetime.now(timezone.utc)
        
        while self.is_running and not self.stop_event.is_set():
            try:
                cycle_start = datetime.now(timezone.utc)
                
                self._check_cycle()
                
                # FIXED: Probl√®me 14 - Logging p√©riodique avec timestamp
                now = datetime.now(timezone.utc)
                if (now - last_log_time).total_seconds() > 300:  # Toutes les 5 minutes
                    self._log_periodic_stats()
                    last_log_time = now
                
                # Calcul du d√©lai d'attente
                if self.consecutive_errors > 20:
                    self.logger.critical(
                        f"‚ùå Trop d'erreurs cons√©cutives ({self.consecutive_errors}), "
                        f"pause longue"
                    )
                    wait_time = self.config.check_interval_seconds * 2
                elif self.consecutive_errors > 10:
                    self.logger.warning(
                        f"‚ö†Ô∏è {self.consecutive_errors} erreurs cons√©cutives, "
                        f"pause augment√©e"
                    )
                    wait_time = self.config.check_interval_seconds * 1.5
                else:
                    wait_time = self.config.check_interval_seconds
                
                # Attendre prochain cycle
                self.stop_event.wait(timeout=wait_time)
            
            except KeyboardInterrupt:
                self.logger.info("‚å®Ô∏è Interruption clavier d√©tect√©e")
                break
            
            except Exception as e:
                # FIXED: Probl√®me 15 - Meilleure gestion des erreurs avec context
                self.logger.error(
                    f"‚ùå Erreur critique dans boucle principale : {e}",
                    exc_info=True,
                    extra={'timestamp': datetime.now(timezone.utc).isoformat()}
                )
                
                with self._state_lock:
                    self.errors_count += 1
                    self.consecutive_errors += 1
                    self.last_error = str(e)
                
                if self.consecutive_errors > 30:
                    self.logger.critical("‚ùå Trop d'erreurs critiques, arr√™t du d√©mon")
                    break
                
                self.logger.info(f"‚è≥ Retry dans {retry_delay}s...")
                time.sleep(retry_delay)
        
        # Arr√™t propre
        self._shutdown()
    
    def _log_periodic_stats(self):
        """
        FIXED: Probl√®me 14 - Log p√©riodique des stats sans doublons
        """
        with self._state_lock:
            if self.start_time:
                uptime = int((datetime.now(timezone.utc) - self.start_time).total_seconds())
                self.logger.info(
                    f"üìä [Stats] Checks: {self.checks_count}, "
                    f"Alertes: {self.alerts_sent}, "
                    f"Erreurs: {self.errors_count} (cons√©cutives: {self.consecutive_errors}), "
                    f"Uptime: {uptime // 3600}h{(uptime % 3600) // 60}m"
                )
    
    def _check_cycle(self):
        """Effectue un cycle de v√©rification - N'ENVOIE QUE LES NOTIFICATIONS CONFIGUR√âES"""
        try:
            current_hour = datetime.now(timezone.utc).hour
            current_day = datetime.now(timezone.utc).weekday()
            
            # V√©rifier si c'est l'heure d'envoyer un r√©sum√©
            should_send_summary = False
            if current_hour in self.config.summary_hours:
                if self.last_summary_sent is None or \
                   (datetime.now(timezone.utc) - self.last_summary_sent).total_seconds() > 3000:
                    should_send_summary = True
            
            if not should_send_summary:
                # Pas l'heure programm√©e, ne rien envoyer
                return
            
            self.logger.info(f"\n‚è∞ Heure programm√©e: {current_hour}h - G√©n√©ration des notifications...")
            
            # Collecter TOUTES les donn√©es en une seule fois
            markets_data = {}
            predictions = {}
            opportunities = {}
            
            for symbol in self.config.crypto_symbols:
                try:
                    market = self.market_service.get_market_data(symbol)
                    if market:
                        markets_data[symbol] = market
                        predictions[symbol] = self.market_service.predict_price_movement(market)
                        opportunities[symbol] = self.market_service.calculate_opportunity_score(
                            market, predictions[symbol]
                        )
                except Exception as e:
                    self.logger.error(f"Erreur r√©cup√©ration {symbol}: {e}")
            
            if not markets_data:
                self.logger.warning("Aucune donn√©e de march√© disponible")
                return
            
            with self._state_lock:
                self.checks_count += 1
            
            # ENVOYER UNE NOTIFICATION PAR CRYPTO (selon configuration)
            for symbol in self.config.crypto_symbols:
                if symbol not in markets_data:
                    continue
                
                try:
                    market = markets_data[symbol]
                    prediction = predictions.get(symbol)
                    opportunity = opportunities.get(symbol)
                    
                    # G√âN√âRER LA NOTIFICATION AVEC LE G√âN√âRATEUR
                    # Celui-ci respecte AUTOMATIQUEMENT la config YAML
                    notification_message = self.notification_generator.generate_notification(
                        symbol=symbol,
                        market=market,
                        prediction=prediction,
                        opportunity=opportunity,
                        all_markets=markets_data,
                        all_predictions=predictions,
                        all_opportunities=opportunities,
                        current_hour=current_hour,
                        current_day_of_week=current_day
                    )
                    
                    # ENVOYER SI MESSAGE G√âN√âR√â
                    if notification_message:
                        success = self.telegram_api.send_message(
                            notification_message,
                            parse_mode="HTML"
                        )
                        
                        if success:
                            with self._state_lock:
                                self.notifications_sent += 1
                            self.logger.info(f"‚úì Notification {symbol} envoy√©e")
                        else:
                            self.logger.error(f"‚úó √âchec envoi {symbol}")
                    else:
                        self.logger.info(f"‚äó Pas de notification pour {symbol} (heures/seuils)")
                
                except Exception as e:
                    self.logger.error(f"Erreur notification {symbol}: {e}", exc_info=True)
                    with self._state_lock:
                        self.errors_count += 1
            
            # Marquer comme envoy√©
            with self._state_lock:
                self.last_summary_sent = datetime.now(timezone.utc)
            
            # Reset erreurs cons√©cutives si succ√®s
            if markets_data:
                with self._state_lock:
                    self.consecutive_errors = 0
        
        except Exception as e:
            self.logger.error(f"‚ùå Erreur cycle : {e}", exc_info=True)
            with self._state_lock:
                self.errors_count += 1
                self.consecutive_errors += 1

    def _is_night_mode(self) -> bool:
        """D√©termine si on est en mode nuit"""
        if not self.config.enable_night_mode:
            return False
        
        current_hour = datetime.now(timezone.utc).hour
        return (
            current_hour < self.config.night_mode_start_hour or
            current_hour >= self.config.night_mode_end_hour
        )
    
    def _process_symbol(self, symbol: str, quiet_mode: bool) -> None:
        """Analyse et traite une crypto avec gestion d'erreur par √©tape"""
        
        self.logger.info(f"\nüìä {symbol}:")
        self.logger.info("-" * 60)
        
        # R√©cup√©ration donn√©es march√©
        try:
            market_data = self.market_service.get_market_data(symbol)
            if not market_data:
                self.logger.warning(f"‚ö†Ô∏è Pas de donn√©es march√© pour {symbol}")
                return
        except Exception as exc:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration donn√©es {symbol}: {exc}")
            raise
        
        # Affichage prix
        try:
            self.logger.info(
                f"üí∞ Prix : {market_data.current_price.price_eur:.2f} ‚Ç¨ "
                f"({market_data.current_price.change_24h:+.2f}% 24h)"
            )
        except Exception as exc:
            self.logger.error(f"‚ùå Erreur affichage prix {symbol}: {exc}")
        
        # Pr√©diction
        prediction = None
        try:
            if self.config.enable_predictions:
                prediction = self.market_service.predict_price_movement(market_data)
                if prediction:
                    self.logger.info(
                        f"üîÆ Pr√©diction : {prediction.prediction_type.value} "
                        f"({prediction.confidence}%)"
                    )
        except Exception as exc:
            self.logger.error(f"‚ùå Erreur pr√©diction {symbol}: {exc}")
        
        # Opportunit√©
        try:
            opportunity = self.market_service.calculate_opportunity_score(
                market_data, prediction
            )
            if opportunity:
                self.logger.info(f"‚≠ê Opportunit√© : {opportunity.score}/10")
        except Exception as exc:
            self.logger.error(f"‚ùå Erreur calcul opportunit√© {symbol}: {exc}")
        
        # Alertes
        try:
            alerts = self.alert_service.check_alerts(market_data, prediction)
            
            if alerts:
                self.logger.info(f"üö® {len(alerts)} alerte(s) g√©n√©r√©e(s)")
                
                for alert in alerts:
                    self.logger.info(f"   ‚Ä¢ [{alert.alert_level.value.upper()}] {alert.message}")
                    
                    if not quiet_mode:
                        try:
                            self.telegram_api.send_alert(alert)
                            with self._state_lock:
                                self.alerts_sent += 1
                            self.logger.info("   ‚úì Alerte envoy√©e sur Telegram")
                        except Exception as e:
                            self.logger.error(f"‚ùå Erreur envoi alerte: {e}")
            else:
                self.logger.info("‚ÑπÔ∏è Aucune alerte")
        
        except Exception as exc:
            self.logger.error(f"‚ùå Erreur v√©rification alertes {symbol}: {exc}")
    
    def _send_startup_message(self):
        """Envoie un message de d√©marrage selon la configuration notifications.yaml"""
        try:
            self.logger.info("üìä G√©n√©ration du message de d√©marrage...")
            
            # En-t√™te de d√©marrage
            startup_header = (
                "üöÄ <b>CRYPTO BOT D√âMARR√â</b>\n"
                f"üìÖ {datetime.now(timezone.utc).strftime('%d/%m/%Y %H:%M:%S')} UTC\n\n"
            )
            
            # Collecter les donn√©es pour toutes les cryptos
            markets_data = {}
            predictions = {}
            opportunities = {}
            
            for symbol in self.config.crypto_symbols:
                try:
                    # R√©cup√©rer les donn√©es
                    market_data = self.market_service.get_market_data(symbol)
                    if market_data:
                        markets_data[symbol] = market_data
                        
                        # Pr√©diction
                        prediction = self.market_service.predict_price_movement(market_data)
                        if prediction:
                            predictions[symbol] = prediction
                        
                        # Opportunit√©
                        opportunity = self.market_service.calculate_opportunity_score(
                            market_data, prediction
                        )
                        if opportunity:
                            opportunities[symbol] = opportunity
                        
                        self.logger.info(
                            f"  ‚úì {symbol}: {market_data.current_price.price_eur:.2f}‚Ç¨"
                        )
                
                except Exception as e:
                    self.logger.error(f"Erreur r√©cup√©ration {symbol}: {e}")
            
            if not markets_data:
                # Fallback si aucune donn√©e
                self.telegram_api.send_message(
                    startup_header + "‚ö†Ô∏è Impossible de r√©cup√©rer les donn√©es de march√©."
                )
                return
            
            # IMPORTANT: Utiliser NotificationGenerator pour respecter notifications.yaml
            # au lieu de SummaryService qui g√©n√®re toujours un r√©sum√© complet
            
            all_notifications = []
            
            for symbol in markets_data.keys():
                try:
                    # G√©n√©rer la notification selon la config dans notifications.yaml
                    notification = self.notification_generator.generate_notification(
                        symbol=symbol,
                        market_data=markets_data[symbol],
                        prediction=predictions.get(symbol),
                        opportunity=opportunities.get(symbol),
                        time_slot="startup",  # Slot sp√©cial pour le d√©marrage
                        is_scheduled=False     # Pas une notification programm√©e
                    )
                    
                    if notification:
                        all_notifications.append(notification)
                
                except Exception as e:
                    self.logger.error(f"Erreur g√©n√©ration notification {symbol}: {e}")
            
            if not all_notifications:
                self.logger.warning("Aucune notification g√©n√©r√©e")
                return
            
            # Assembler le message final
            full_message = startup_header + "\n\n".join(all_notifications)
            
            # Envoyer sur Telegram
            success = self.telegram_api.send_message(full_message, parse_mode="HTML")
            
            if success:
                self.logger.info("‚úÖ Message de d√©marrage envoy√© (config notifications.yaml respect√©e)")
            else:
                self.logger.error("‚ùå √âchec envoi message de d√©marrage")
        
        except Exception as e:
            self.logger.error(f"‚ùå Erreur envoi message d√©marrage: {e}")
            import traceback
            self.logger.error(traceback.format_exc())

    def _save_stats(self):
        """Sauvegarde les statistiques"""
        try:
            if self.start_time:
                uptime_seconds = int((datetime.now(timezone.utc) - self.start_time).total_seconds())
                
                self.db_service.save_stats(
                    self.checks_count,
                    self.alerts_sent,
                    self.errors_count,
                    uptime_seconds
                )
        except Exception as exc:
            self.logger.error(f"‚ùå Erreur sauvegarde stats: {exc}")
        
        # FIXED: Probl√®me 14 - Stats sans doublon, uniquement √† la demande
        with self._state_lock:
            if self.start_time:
                uptime = int((datetime.now(timezone.utc) - self.start_time).total_seconds())
                self.logger.info(
                    f"\nüìä Stats : {self.checks_count} v√©rifications, "
                    f"{self.alerts_sent} alertes, {self.errors_count} erreurs "
                    f"({self.consecutive_errors} cons√©cutives), "
                    f"Uptime: {uptime // 3600}h{(uptime % 3600) // 60}m"
                )
        
        # Nettoyage p√©riodique
        if self.checks_count % 100 == 0:
            try:
                self.db_service.cleanup_old_data(self.config.keep_history_days)
                self.logger.info("üßπ Nettoyage base de donn√©es effectu√©")
            except Exception as exc:
                self.logger.error(f"‚ùå Erreur nettoyage DB: {exc}")

    def stop(self):
        """Arr√™te le d√©mon"""
        self.logger.info("\nüõë Arr√™t du d√©mon demand√©...")
        
        with self._state_lock:
            self.is_running = False
            self.stop_event.set()
    
    def _shutdown(self):
        """Nettoyage avant arr√™t"""
        
        with self._state_lock:
            self.is_running = False
            self.stop_event.set()
        
        self.logger.info("\n" + "="*60)
        self.logger.info("üëã CRYPTO BOT DAEMON ARR√äT√â")
        self.logger.info("="*60)
        
        with self._state_lock:
            if self.start_time:
                uptime = int((datetime.now(timezone.utc) - self.start_time).total_seconds())
                self.logger.info(f"Uptime : {uptime // 3600}h {(uptime % 3600) // 60}m")
            
            self.logger.info(f"V√©rifications : {self.checks_count}")
            self.logger.info(f"Alertes envoy√©es : {self.alerts_sent}")
            self.logger.info(f"Erreurs : {self.errors_count}")
        
        self.logger.info("="*60 + "\n")
