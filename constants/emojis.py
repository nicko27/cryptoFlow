"""
Emojis centralis√©s pour les notifications
FIXED: Tous les emojis en un seul endroit pour coh√©rence
"""


class NotificationEmojis:
    """Emojis standardis√©s pour toutes les notifications"""
    
    # Prix et variations
    PRICE = "üí∞"
    PRICE_UP = "üìà"
    PRICE_DOWN = "üìâ"
    PRICE_STABLE = "‚û°Ô∏è"
    VOLUME = "üìä"
    MARKET_CAP = "üíé"
    
    # Alertes et niveaux
    INFO = "‚ÑπÔ∏è"
    WARNING = "‚ö†Ô∏è"
    IMPORTANT = "üîî"
    CRITICAL = "üö®"
    SUCCESS = "‚úÖ"
    ERROR = "‚ùå"
    
    # Pr√©dictions et tendances
    PREDICTION = "üîÆ"
    BULLISH = "üöÄ"
    SLIGHTLY_BULLISH = "üìà"
    NEUTRAL = "ü§∑"
    SLIGHTLY_BEARISH = "üìâ"
    BEARISH = "‚¨áÔ∏è"
    AI = "ü§ñ"
    
    # Opportunit√©s et risques
    OPPORTUNITY = "‚≠ê"
    EXCELLENT_OPPORTUNITY = "üåü"
    GOOD_OPPORTUNITY = "üëç"
    MEDIUM_OPPORTUNITY = "‚öñÔ∏è"
    LOW_OPPORTUNITY = "‚ö†Ô∏è"
    
    # Niveaux de risque
    HIGH_RISK = "‚ö†Ô∏è"
    MEDIUM_RISK = "‚öñÔ∏è"
    LOW_RISK = "üõ°Ô∏è"
    
    # Recommandations
    BUY = "üíö"
    SELL = "‚ù§Ô∏è"
    HOLD = "üü°"
    
    # Moments de la journ√©e
    MORNING = "üåÖ"
    NOON = "‚òÄÔ∏è"
    AFTERNOON = "üå§Ô∏è"
    EVENING = "üåÜ"
    NIGHT = "üåô"
    
    # Sentiment march√©
    FEAR = "üò±"
    GREED = "ü§ë"
    SENTIMENT = "üòê"
    
    # Courtiers et services
    BROKER = "üè¶"
    CHART = "üìà"
    GRAPH = "üìä"
    
    # Indicateurs techniques
    RSI = "üìâ"
    MACD = "üìä"
    MA = "üìà"
    SUPPORT = "üõ°Ô∏è"
    RESISTANCE = "üöß"
    
    # Gain/Perte
    GAIN = "üí∞"
    LOSS = "üìâ"
    PROFIT = "üíµ"
    
    # Suggestions
    SUGGESTION = "üí°"
    TIP = "üìå"
    IDEA = "üéØ"
    
    # Divers
    BELL = "üîî"
    ROCKET = "üöÄ"
    FIRE = "üî•"
    THINKING = "ü§î"
    CELEBRATION = "üéâ"
    CLOCK = "‚è∞"
    CALENDAR = "üìÖ"
    DOCUMENT = "üìÑ"
    
    @classmethod
    def get_time_emoji(cls, hour: int) -> str:
        """Retourne l'emoji adapt√© √† l'heure"""
        if 5 <= hour < 12:
            return cls.MORNING
        elif 12 <= hour < 14:
            return cls.NOON
        elif 14 <= hour < 18:
            return cls.AFTERNOON
        elif 18 <= hour < 23:
            return cls.EVENING
        else:
            return cls.NIGHT
    
    @classmethod
    def get_change_emoji(cls, change: float) -> str:
        """Retourne l'emoji adapt√© au changement de prix"""
        if change > 5:
            return cls.BULLISH
        elif change > 0:
            return cls.PRICE_UP
        elif change > -5:
            return cls.PRICE_DOWN
        else:
            return cls.BEARISH
    
    @classmethod
    def get_alert_emoji(cls, level: str) -> str:
        """Retourne l'emoji adapt√© au niveau d'alerte"""
        level_map = {
            "INFO": cls.INFO,
            "WARNING": cls.WARNING,
            "IMPORTANT": cls.IMPORTANT,
            "CRITICAL": cls.CRITICAL,
        }
        return level_map.get(level.upper(), cls.INFO)
    
    @classmethod
    def get_opportunity_emoji(cls, score: int) -> str:
        """Retourne l'emoji adapt√© au score d'opportunit√©"""
        if score >= 8:
            return cls.EXCELLENT_OPPORTUNITY
        elif score >= 6:
            return cls.GOOD_OPPORTUNITY
        elif score >= 4:
            return cls.MEDIUM_OPPORTUNITY
        else:
            return cls.LOW_OPPORTUNITY
    
    @classmethod
    def get_risk_emoji(cls, risk_level: str) -> str:
        """Retourne l'emoji adapt√© au niveau de risque"""
        risk_map = {
            "LOW": cls.LOW_RISK,
            "MEDIUM": cls.MEDIUM_RISK,
            "HIGH": cls.HIGH_RISK,
        }
        return risk_map.get(risk_level.upper(), cls.MEDIUM_RISK)
