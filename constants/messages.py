"""
Messages configurables pour notifications
FIXED: Probl√®me 10 - Messages centralis√©s et traduisibles
"""

from typing import Dict


class NotificationMessages:
    """Messages standardis√©s en fran√ßais"""
    
    # Messages de prix
    PRICE_MESSAGES = {
        'rising': {
            'normal': "Le prix est en hausse",
            'kid_friendly': "üìà Le prix monte ! C'est une bonne nouvelle si tu poss√®des d√©j√† cette crypto."
        },
        'falling': {
            'normal': "Le prix est en baisse",
            'kid_friendly': "üìâ Le prix baisse. √áa peut √™tre un bon moment pour acheter si tu crois en cette crypto."
        },
        'stable': {
            'normal': "Le prix est stable",
            'kid_friendly': "‚û°Ô∏è Le prix est stable. Le march√© h√©site."
        },
        'volatile': {
            'normal': "Le prix est tr√®s volatil",
            'kid_friendly': "üé¢ Le prix bouge beaucoup ! C'est normal avec les cryptos."
        }
    }
    
    # Messages de pr√©diction
    PREDICTION_MESSAGES = {
        'bullish': {
            'normal': "Tendance haussi√®re pr√©vue",
            'kid_friendly': "üöÄ L'IA pense que le prix va monter"
        },
        'bearish': {
            'normal': "Tendance baissi√®re pr√©vue",
            'kid_friendly': "‚¨áÔ∏è L'IA pense que le prix va baisser"
        },
        'neutral': {
            'normal': "Pas de tendance claire",
            'kid_friendly': "ü§∑ L'IA ne voit pas de tendance claire"
        }
    }
    
    # Messages d'opportunit√©
    OPPORTUNITY_MESSAGES = {
        'excellent': {
            'normal': "Excellente opportunit√© d'investissement",
            'kid_friendly': "üåü Excellente opportunit√© ! √Ä surveiller de pr√®s."
        },
        'good': {
            'normal': "Bonne opportunit√©",
            'kid_friendly': "üëç Bonne opportunit√©, √† consid√©rer."
        },
        'medium': {
            'normal': "Opportunit√© moyenne",
            'kid_friendly': "‚öñÔ∏è Opportunit√© moyenne, reste prudent."
        },
        'low': {
            'normal': "Opportunit√© faible",
            'kid_friendly': "‚ö†Ô∏è Opportunit√© faible, attends peut-√™tre."
        }
    }
    
    # Raisons d'investissement
    INVESTMENT_REASONS = {
        'strong_trend': {
            'normal': "Forte tendance positive",
            'kid_friendly': "elle est en pleine forme"
        },
        'undervalued': {
            'normal': "Sous-√©valu√© par rapport √† la moyenne",
            'kid_friendly': "le prix est int√©ressant"
        },
        'good_prediction': {
            'normal': "Pr√©diction AI tr√®s positive",
            'kid_friendly': "l'IA est confiante"
        },
        'high_volume': {
            'normal': "Volume d'√©changes √©lev√©",
            'kid_friendly': "beaucoup de gens l'ach√®tent"
        },
        'momentum': {
            'normal': "Momentum fort",
            'kid_friendly': "le mouvement reste puissant"
        },
        'recovery': {
            'normal': "Phase de r√©cup√©ration",
            'kid_friendly': "elle rebondit et reprend de la force"
        },
        'low_volatility': {
            'normal': "Faible volatilit√©",
            'kid_friendly': "elle est stable et rassurante"
        }
    }
    
    # Messages de risque
    RISK_MESSAGES = {
        'low': {
            'normal': "Risque faible",
            'kid_friendly': "üõ°Ô∏è Peu risqu√© pour commencer"
        },
        'medium': {
            'normal': "Risque mod√©r√©",
            'kid_friendly': "‚öñÔ∏è Risque moyen, sois attentif"
        },
        'high': {
            'normal': "Risque √©lev√©",
            'kid_friendly': "‚ö†Ô∏è Assez risqu√©, fais attention"
        }
    }
    
    # Messages de recommandation
    RECOMMENDATION_MESSAGES = {
        'BUY': {
            'normal': "Achat recommand√©",
            'kid_friendly': "üíö C'est peut-√™tre le moment d'acheter"
        },
        'SELL': {
            'normal': "Vente recommand√©e",
            'kid_friendly': "‚ù§Ô∏è √áa pourrait √™tre le moment de vendre"
        },
        'HOLD': {
            'normal': "Conserver la position",
            'kid_friendly': "üü° Garde ce que tu as, attends de voir"
        }
    }
    
    # Messages Fear & Greed
    FEAR_GREED_MESSAGES = {
        'extreme_fear': {
            'normal': "Peur extr√™me sur le march√©",
            'kid_friendly': "üò± Tout le monde a tr√®s peur ! C'est parfois un bon moment pour acheter."
        },
        'fear': {
            'normal': "Peur sur le march√©",
            'kid_friendly': "üò∞ Les gens ont peur. Le march√© est nerveux."
        },
        'neutral': {
            'normal': "Sentiment neutre",
            'kid_friendly': "üòê Les gens ne savent pas trop quoi penser."
        },
        'greed': {
            'normal': "Avidit√© sur le march√©",
            'kid_friendly': "ü§ë Tout le monde veut acheter ! Attention √† ne pas suivre la foule."
        },
        'extreme_greed': {
            'normal': "Avidit√© extr√™me sur le march√©",
            'kid_friendly': "ü§ëüí∞ Euphorie totale ! C'est souvent le moment d'√™tre prudent."
        }
    }
    
    # Messages g√©n√©raux
    GENERAL_MESSAGES = {
        'unavailable': "Information non disponible",
        'error': "Erreur lors de la r√©cup√©ration",
        'loading': "Chargement...",
        'no_data': "Pas de donn√©es",
        'coming_soon': "Bient√¥t disponible"
    }
    
    # Disclaimers
    DISCLAIMERS = {
        'default': "üí° N'investis jamais plus que ce que tu peux te permettre de perdre !",
        'kid_friendly': "üí° Rappel important : demande toujours l'avis d'un adulte avant d'investir !",
        'risk_warning': "‚ö†Ô∏è Les cryptomonnaies sont tr√®s volatiles. Investis de mani√®re responsable.",
        'not_financial_advice': "‚ÑπÔ∏è Ceci n'est pas un conseil financier, juste des informations."
    }
    
    # Glossaire par d√©faut
    DEFAULT_GLOSSARY = {
        'RSI': "Indice de Force Relative - Montre si la crypto est trop achet√©e (>70) ou trop vendue (<30)",
        'MACD': "Indicateur de tendance qui montre la direction du march√©",
        'Support': "Prix plancher o√π la crypto a du mal √† descendre",
        'R√©sistance': "Prix plafond o√π la crypto a du mal √† monter",
        'Volume': "Quantit√© de crypto √©chang√©e - Un volume √©lev√© = beaucoup d'int√©r√™t",
        'Volatilit√©': "Mesure de la variation du prix - Haute volatilit√© = prix qui bouge beaucoup",
        'Market Cap': "Valeur totale de toutes les pi√®ces en circulation",
        'ATH': "All-Time High - Le prix le plus haut jamais atteint",
        'ATL': "All-Time Low - Le prix le plus bas jamais atteint",
        'HODL': "Strat√©gie qui consiste √† garder ses cryptos longtemps",
        'Bull Market': "March√© haussier - Les prix montent",
        'Bear Market': "March√© baissier - Les prix descendent",
        'Whale': "Gros investisseur qui poss√®de beaucoup de crypto",
        'Pump': "Hausse rapide du prix",
        'Dump': "Chute rapide du prix"
    }
    
    @classmethod
    def get_message(cls, category: str, key: str, mode: str = 'normal') -> str:
        """
        R√©cup√®re un message par cat√©gorie et cl√©
        
        Args:
            category: Cat√©gorie de message (PRICE_MESSAGES, etc.)
            key: Cl√© du message
            mode: 'normal' ou 'kid_friendly'
        
        Returns:
            Le message appropri√© ou un fallback
        """
        messages_dict = getattr(cls, category, {})
        message_entry = messages_dict.get(key, {})
        
        if isinstance(message_entry, dict):
            return message_entry.get(mode, message_entry.get('normal', 'N/A'))
        
        return str(message_entry)
    
    @classmethod
    def get_price_message(cls, change_24h: float, kid_friendly: bool = False) -> str:
        """Retourne le message appropri√© selon la variation de prix"""
        mode = 'kid_friendly' if kid_friendly else 'normal'
        
        if change_24h > 5:
            return cls.get_message('PRICE_MESSAGES', 'rising', mode)
        elif change_24h < -5:
            return cls.get_message('PRICE_MESSAGES', 'falling', mode)
        elif abs(change_24h) > 10:
            return cls.get_message('PRICE_MESSAGES', 'volatile', mode)
        else:
            return cls.get_message('PRICE_MESSAGES', 'stable', mode)
    
    @classmethod
    def get_fear_greed_message(cls, index: int, kid_friendly: bool = False) -> str:
        """Retourne le message appropri√© selon l'indice Fear & Greed"""
        mode = 'kid_friendly' if kid_friendly else 'normal'
        
        if index < 25:
            return cls.get_message('FEAR_GREED_MESSAGES', 'extreme_fear', mode)
        elif index < 45:
            return cls.get_message('FEAR_GREED_MESSAGES', 'fear', mode)
        elif index < 55:
            return cls.get_message('FEAR_GREED_MESSAGES', 'neutral', mode)
        elif index < 75:
            return cls.get_message('FEAR_GREED_MESSAGES', 'greed', mode)
        else:
            return cls.get_message('FEAR_GREED_MESSAGES', 'extreme_greed', mode)
