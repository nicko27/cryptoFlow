#!/usr/bin/env python3
"""
Script de suppression de l'interface graphique du Crypto Bot
Supprime tous les fichiers GUI PyQt6 et les d√©pendances associ√©es
"""

import os
import sys
import shutil
from pathlib import Path


def confirm_deletion():
    """Demande confirmation avant suppression"""
    print("‚ö†Ô∏è  ATTENTION : Ce script va supprimer D√âFINITIVEMENT :")
    print("   ‚Ä¢ Tous les fichiers du dossier ui/")
    print("   ‚Ä¢ Les d√©pendances PyQt6 dans requirements.txt")
    print("   ‚Ä¢ Le mode GUI dans main.py")
    print()
    response = input("Voulez-vous continuer ? (tapez 'OUI' en majuscules) : ")
    return response == "OUI"


def remove_ui_directory():
    """Supprime le dossier ui/ contenant l'interface graphique"""
    ui_path = Path("ui")
    
    if ui_path.exists() and ui_path.is_dir():
        print(f"üóëÔ∏è  Suppression du dossier {ui_path}/...")
        shutil.rmtree(ui_path)
        print(f"‚úÖ Dossier {ui_path}/ supprim√©")
    else:
        print(f"‚ÑπÔ∏è  Le dossier {ui_path}/ n'existe pas")


def clean_requirements_txt():
    """Supprime les d√©pendances GUI de requirements.txt"""
    req_file = Path("requirements.txt")
    
    if not req_file.exists():
        print("‚ÑπÔ∏è  requirements.txt n'existe pas")
        return
    
    print("üìù Nettoyage de requirements.txt...")
    
    # D√©pendances GUI √† supprimer
    gui_deps = [
        "PyQt6",
        "PyQt6-Charts",
        "customtkinter",
        "matplotlib",  # Souvent utilis√© pour GUI
        "plotly",      # Souvent utilis√© pour GUI
    ]
    
    with open(req_file, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Filtrer les lignes
    new_lines = []
    removed = []
    
    for line in lines:
        line_lower = line.lower().strip()
        if any(dep.lower() in line_lower for dep in gui_deps):
            removed.append(line.strip())
        else:
            new_lines.append(line)
    
    # √âcrire le nouveau fichier
    with open(req_file, 'w', encoding='utf-8') as f:
        f.writelines(new_lines)
    
    if removed:
        print("‚úÖ D√©pendances GUI supprim√©es de requirements.txt :")
        for dep in removed:
            print(f"   ‚Ä¢ {dep}")
    else:
        print("‚ÑπÔ∏è  Aucune d√©pendance GUI trouv√©e dans requirements.txt")


def update_main_py():
    """Supprime le mode GUI de main.py"""
    main_file = Path("main.py")
    
    if not main_file.exists():
        print("‚ÑπÔ∏è  main.py n'existe pas")
        return
    
    print("üìù Modification de main.py...")
    
    with open(main_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_content = content
    
    # Supprimer la fonction run_gui_mode
    gui_function_start = content.find("def run_gui_mode(")
    if gui_function_start != -1:
        # Trouver la fin de la fonction (prochaine fonction ou fin de fichier)
        next_function = content.find("\ndef ", gui_function_start + 1)
        if next_function == -1:
            next_function = len(content)
        
        content = content[:gui_function_start] + content[next_function:]
        print("‚úÖ Fonction run_gui_mode() supprim√©e")
    
    # Modifier la condition de lancement par d√©faut
    if "run_gui_mode" in content:
        # Remplacer l'appel √† run_gui_mode par run_daemon_mode
        content = content.replace(
            "run_gui_mode(config)",
            "print('‚ùå Mode GUI supprim√©. Utilisez --daemon ou --once')\n    sys.exit(1)"
        )
        print("‚úÖ Appel √† run_gui_mode() remplac√© par message d'erreur")
    
    # √âcrire le fichier modifi√© seulement s'il y a eu des changements
    if content != original_content:
        # Cr√©er une sauvegarde
        backup_file = main_file.with_suffix('.py.backup')
        shutil.copy(main_file, backup_file)
        print(f"üíæ Sauvegarde cr√©√©e : {backup_file}")
        
        with open(main_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print("‚úÖ main.py modifi√©")
    else:
        print("‚ÑπÔ∏è  Aucune modification n√©cessaire dans main.py")


def create_summary():
    """Affiche un r√©sum√© des modifications"""
    print()
    print("=" * 70)
    print("üìä R√âSUM√â DES MODIFICATIONS")
    print("=" * 70)
    print()
    print("‚úÖ Interface graphique compl√®tement supprim√©e")
    print()
    print("üìã Modes disponibles :")
    print("   ‚Ä¢ python3 main.py --daemon   (mode d√©mon en arri√®re-plan)")
    print("   ‚Ä¢ python3 main.py --once     (ex√©cution unique)")
    print()
    print("üîß Pour restaurer l'interface graphique :")
    print("   1. Restaurez main.py.backup si n√©cessaire")
    print("   2. R√©cup√©rez le dossier ui/ depuis votre sauvegarde")
    print("   3. R√©installez : pip3 install PyQt6 PyQt6-Charts")
    print()
    print("=" * 70)


def main():
    """Fonction principale"""
    print()
    print("=" * 70)
    print("üîß SUPPRESSION DE L'INTERFACE GRAPHIQUE")
    print("=" * 70)
    print()
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if not Path("main.py").exists():
        print("‚ùå Erreur : main.py non trouv√©")
        print("   Ex√©cutez ce script depuis le r√©pertoire racine du projet")
        return 1
    
    # Demander confirmation
    if not confirm_deletion():
        print()
        print("‚ùå Op√©ration annul√©e par l'utilisateur")
        return 0
    
    print()
    print("üöÄ D√©but de la suppression...")
    print()
    
    try:
        # Supprimer le dossier ui/
        remove_ui_directory()
        print()
        
        # Nettoyer requirements.txt
        clean_requirements_txt()
        print()
        
        # Modifier main.py
        update_main_py()
        print()
        
        # Afficher le r√©sum√©
        create_summary()
        
        return 0
        
    except Exception as e:
        print()
        print(f"‚ùå Erreur lors de la suppression : {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
